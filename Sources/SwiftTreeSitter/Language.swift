//
//  Language.swift
//
//
//  Created by Gustavo Ordaz on 7/22/20.
//

import TreeSitter

/// An error that occurred when trying to assign an incompatible `Language` to a `Parser`.
public enum LanguageError: Error {
    case version(uint)
}

/// An opaque object that defines how to parse a particular language. The code for each
/// `Language` is generated by the Tree-sitter CLI.
public struct Language: Equatable {
    let language: UnsafePointer<TSLanguage>
    
    public init(_ language: UnsafePointer<TSLanguage>) {
        self.language = language
    }
    
    /// Get the ABI version number that indicates which version of the Tree-sitter CLI
    /// that was used to generate this `Language`.
    public func version() -> uint {
        ts_language_version(language)
    }
    
    /// Get the number of distinct node types in this language.
    public func nodeKindCount() -> uint {
        ts_language_symbol_count(language)
    }
    
    /// Get the name of the node kind for the given numerical id.
    public func nodeKindFor(id: ushort) -> String? {
        let ptr = ts_language_symbol_name(language, id)
        
        guard let pointer = ptr else { return nil }
        
        return String(cString: pointer)
    }
    
    /// Get the numeric id for the given node kind.
    public func idForNode(kind: String, named: Bool) -> ushort {
        ts_language_symbol_for_name(language, kind, UInt32(kind.count), named)
    }
    
    /// Check if the node type for the given numerical id is named (as opposed
    /// to an anonymous node type).
    public func nodeKindIsNamed(id: ushort) -> Bool {
        ts_language_symbol_type(language, id).rawValue == TSSymbolTypeRegular.rawValue
    }
    
    public func nodeKindIsVisible(id: ushort) -> Bool {
        ts_language_symbol_type(language, id).rawValue <= TSSymbolTypeAnonymous.rawValue
    }
    
    /// Get the number of distinct field names in this language.
    public func fieldCount() -> uint {
        ts_language_field_count(language)
    }
    
    /// Get the field names for the given numerical id.
    public func fieldNameFor(filedId: ushort) -> String? {
        let ptr = ts_language_field_name_for_id(language, filedId)
        
        guard let pointer = ptr else { return nil }
        
        return String(cString: pointer)
    }
    
    /// Get the numerical id for the given field name.
    public func fieldIdFor(fieldName: String) -> UInt16? {
        let id = ts_language_field_id_for_name(
            language,
            fieldName,
            UInt32(fieldName.count)
        )
        if id == 0 {
            return .none
        }
        
        return id
    }
}

